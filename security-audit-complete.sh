#!/bin/bash

# Auditor√≠a Completa de Seguridad - TuneBoxd
# Verificaci√≥n exhaustiva antes del despliegue en producci√≥n

# No usar set -e para que el script complete toda la auditor√≠a

# Colores
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m'

# Contadores
CRITICAL_ISSUES=0
WARNING_ISSUES=0
INFO_ISSUES=0

log_critical() {
    echo -e "${RED}üö® CR√çTICO: $1${NC}"
    ((CRITICAL_ISSUES++))
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  ADVERTENCIA: $1${NC}"
    ((WARNING_ISSUES++))
}

log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  INFO: $1${NC}"
    ((INFO_ISSUES++))
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_header() {
    echo -e "\n${PURPLE}=== $1 ===${NC}"
}

echo -e "${PURPLE}üîí AUDITOR√çA COMPLETA DE SEGURIDAD - TUNEBOXD üîí${NC}"
echo "Fecha: $(date)"
echo "======================================================="

# 1. VERIFICACI√ìN DE ARCHIVOS SENSIBLES
log_header "1. ARCHIVOS SENSIBLES Y CONFIGURACI√ìN"

# Verificar que archivos sensibles no est√©n en el repositorio
if [ -f ".env" ]; then
    log_critical "Archivo .env encontrado en el repositorio"
fi

if [ -f ".env.local" ]; then
    if grep -q "\.env\.local" .gitignore; then
        log_success ".env.local excluido correctamente en .gitignore"
    else
        log_critical ".env.local NO est√° en .gitignore - RIESGO DE EXPOSICI√ìN"
    fi
fi

# Verificar archivos de base de datos
if ls *.db 1> /dev/null 2>&1; then
    if grep -q "\.db" .gitignore; then
        log_success "Archivos de base de datos excluidos en .gitignore"
    else
        log_warning "Archivos .db encontrados pero no excluidos en .gitignore"
    fi
fi

# 2. AN√ÅLISIS DE C√ìDIGO - VULNERABILIDADES COMUNES
log_header "2. AN√ÅLISIS DE VULNERABILIDADES EN C√ìDIGO"

# Buscar secrets hardcodeados (mejorado para evitar falsos positivos)
echo "Buscando secretos hardcodeados..."

# Buscar patrones espec√≠ficos de secrets hardcodeados
HARDCODED_SECRETS=$(grep -r "password\s*=\s*['\"][^'\"]*['\"]" src/ --include="*.js" --include="*.jsx" | grep -v "password_hash" | grep -v "reset_password" | grep -v "formData.password" | grep -v "req.body.password" | grep -v "user.password" | head -5)
if [ -n "$HARDCODED_SECRETS" ]; then
    log_critical "Posibles contrase√±as hardcodeadas encontradas"
fi

API_KEYS=$(grep -r "api_key\s*=\s*['\"][^'\"]*['\"]" src/ --include="*.js" --include="*.jsx" | grep -v "process.env" | head -5)
if [ -n "$API_KEYS" ]; then
    log_critical "Posibles API keys hardcodeadas encontradas"
fi

SECRETS=$(grep -r "secret\s*=\s*['\"][^'\"]*['\"]" src/ --include="*.js" --include="*.jsx" | grep -v "process.env" | head -5)
if [ -n "$SECRETS" ]; then
    log_critical "Posibles secretos hardcodeados encontrados"
fi

# Buscar console.log en producci√≥n
echo "Verificando console.log en producci√≥n..."
CONSOLE_COUNT=$(grep -r "console\.log" src/ --include="*.js" --include="*.jsx" | wc -l)
if [ "$CONSOLE_COUNT" -gt 0 ]; then
    log_warning "$CONSOLE_COUNT console.log encontrados - pueden exponer informaci√≥n sensible"
fi

# Buscar eval() - muy peligroso
if grep -r "eval(" src/ --include="*.js" --include="*.jsx"; then
    log_critical "Uso de eval() encontrado - VULNERABILIDAD CR√çTICA"
fi

# 3. VERIFICACI√ìN DE AUTENTICACI√ìN Y AUTORIZACI√ìN
log_header "3. AUTENTICACI√ìN Y AUTORIZACI√ìN"

# Verificar middleware de autenticaci√≥n
if [ -f "middleware.js" ]; then
    log_success "Middleware de autenticaci√≥n existe"
    
    # Verificar rate limiting
    if grep -q "ratelimit\|rate-limit" middleware.js; then
        log_success "Rate limiting configurado"
    else
        log_warning "Rate limiting no encontrado en middleware"
    fi
    
    # Verificar headers de seguridad
    if grep -q "X-Frame-Options\|Content-Security-Policy" middleware.js; then
        log_success "Headers de seguridad configurados"
    else
        log_warning "Headers de seguridad no encontrados"
    fi
else
    log_critical "middleware.js no encontrado"
fi

# 4. VERIFICACI√ìN DE DEPENDENCIAS
log_header "4. AN√ÅLISIS DE DEPENDENCIAS"

if [ -f "package.json" ]; then
    # Verificar dependencias de seguridad cr√≠ticas
    if grep -q "bcryptjs\|bcrypt" package.json; then
        log_success "Biblioteca de hashing seguro (bcrypt) instalada"
    else
        log_critical "No se encontr√≥ biblioteca de hashing seguro"
    fi
    
    if grep -q "jsonwebtoken" package.json; then
        log_success "JWT library instalada"
    else
        log_critical "JWT library no encontrada"
    fi
    
    # Verificar dependencias obsoletas o vulnerables conocidas
    if command -v npm &> /dev/null; then
        echo "Ejecutando npm audit..."
        npm audit --audit-level=high 2>/dev/null || log_warning "npm audit report√≥ vulnerabilidades"
    fi
fi

# 5. VERIFICACI√ìN DE APIs
log_header "5. SEGURIDAD DE APIs"

# Verificar protecci√≥n CSRF
if grep -r "csrf" src/ --include="*.js" --include="*.jsx"; then
    log_success "Protecci√≥n CSRF implementada"
else
    log_warning "Protecci√≥n CSRF no encontrada"
fi

# Verificar validaci√≥n de entrada
if grep -r "sanitize\|validate" src/ --include="*.js" --include="*.jsx"; then
    log_success "Validaci√≥n/sanitizaci√≥n de entrada encontrada"
else
    log_warning "Validaci√≥n de entrada no evidente"
fi

# Verificar manejo de errores seguro
api_files=$(find src/app/api -name "*.js" 2>/dev/null || echo "")
if [ -n "$api_files" ]; then
    for file in $api_files; do
        if ! grep -q "try.*catch\|\.catch(" "$file"; then
            log_warning "Archivo API sin manejo de errores: $file"
        fi
    done
fi

# 6. CONFIGURACI√ìN DE PRODUCCI√ìN
log_header "6. CONFIGURACI√ìN DE PRODUCCI√ìN"

# Verificar configuraci√≥n de Next.js
if [ -f "next.config.mjs" ]; then
    log_success "next.config.mjs existe"
    
    if grep -q "experimental" next.config.mjs; then
        log_warning "Configuraciones experimentales en producci√≥n"
    fi
else
    log_info "next.config.mjs no encontrado (opcional)"
fi

# Verificar configuraci√≥n de Vercel
if [ -f "vercel.json" ]; then
    log_success "vercel.json configurado"
    
    if grep -q "maxDuration" vercel.json; then
        log_success "Timeouts configurados"
    fi
    
    if grep -q "headers" vercel.json; then
        log_success "Headers de seguridad en vercel.json"
    fi
fi

# 7. VERIFICACI√ìN DE BASE DE DATOS
log_header "7. SEGURIDAD DE BASE DE DATOS"

# Verificar que no se use SQLite en producci√≥n
if [ -f ".env.production" ]; then
    if grep -q "sqlite\|\.db" .env.production; then
        log_critical "SQLite configurado para producci√≥n - usar PostgreSQL"
    else
        log_success "Base de datos de producci√≥n correcta"
    fi
fi

# Verificar preparaci√≥n de queries (buscar concatenaci√≥n de SQL)
if grep -r "SELECT.*+\|INSERT.*+" src/ --include="*.js" --include="*.jsx"; then
    log_critical "Posible inyecci√≥n SQL - usar prepared statements"
fi

# 8. VERIFICACI√ìN DE ARCHIVOS EST√ÅTICOS
log_header "8. ARCHIVOS EST√ÅTICOS Y P√öBLICO"

if [ -d "public" ]; then
    # Verificar que no hay archivos sensibles en p√∫blico
    if find public -name "*.env*" -o -name "*.key*" -o -name "*.pem*" | grep -q .; then
        log_critical "Archivos sensibles en directorio p√∫blico"
    fi
    
    # Verificar tama√±o de archivos p√∫blicos
    large_files=$(find public -size +5M 2>/dev/null || echo "")
    if [ -n "$large_files" ]; then
        log_warning "Archivos grandes en public/: $large_files"
    fi
fi

# 9. VERIFICACI√ìN DE HEADERS DE SEGURIDAD
log_header "9. HEADERS DE SEGURIDAD"

security_headers=(
    "X-Frame-Options"
    "X-Content-Type-Options"
    "Referrer-Policy"
    "X-XSS-Protection"
    "Content-Security-Policy"
)

if [ -f "vercel.json" ]; then
    for header in "${security_headers[@]}"; do
        if grep -q "$header" vercel.json; then
            log_success "$header configurado"
        else
            log_warning "$header no configurado"
        fi
    done
fi

# 10. RESUMEN Y RECOMENDACIONES
log_header "10. RESUMEN DE AUDITOR√çA"

echo ""
echo "üìä RESULTADOS:"
echo "üö® Problemas cr√≠ticos: $CRITICAL_ISSUES"
echo "‚ö†Ô∏è  Advertencias: $WARNING_ISSUES"
echo "‚ÑπÔ∏è  Informaci√≥n: $INFO_ISSUES"
echo ""

if [ $CRITICAL_ISSUES -gt 0 ]; then
    echo -e "${RED}‚ùå NO PROCEDER CON EL DESPLIEGUE${NC}"
    echo "Resolver problemas cr√≠ticos antes de continuar."
    echo ""
    echo "üö® PROBLEMAS CR√çTICOS ENCONTRADOS: $CRITICAL_ISSUES"
    exit 1
elif [ $WARNING_ISSUES -gt 10 ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  DESPLIEGUE CON PRECAUCI√ìN${NC}"
    echo "Muchas advertencias encontradas. Revisar antes del despliegue."
    echo "Ejecute: ./scripts/clean-console-logs.sh para limpiar console.log"
else
    echo -e "${GREEN}‚úÖ LISTO PARA DESPLIEGUE${NC}"
    echo "La aplicaci√≥n cumple con los est√°ndares b√°sicos de seguridad."
fi

echo ""
echo "üîê RECOMENDACIONES PARA PRODUCCI√ìN:"
echo "1. Configurar PostgreSQL con SSL"
echo "2. Implementar Content Security Policy estricta"
echo "3. Configurar monitoreo de logs de seguridad"
echo "4. Implementar rate limiting agresivo"
echo "5. Configurar backups autom√°ticos"
echo "6. Implementar alertas de seguridad"
echo "7. Revisar dependencias regularmente"
echo "8. Configurar HTTPS/TLS estricto"
echo ""

echo "üöÄ Pr√≥ximo paso: Configurar variables de entorno en Vercel"
